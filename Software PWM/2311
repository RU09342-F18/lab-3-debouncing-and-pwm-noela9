/* --COPYRIGHT--,BSD_EX
 * Copyright (c) 2012, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *******************************************************************************
 * 
 *                       MSP430 CODE EXAMPLE DISCLAIMER
 *
 * MSP430 code examples are self-contained low-level programs that typically
 * demonstrate a single peripheral function or device feature in a highly
 * concise manner. For this the code may rely on the device's power-on default
 * register values and settings such as the clock configuration and care must
 * be taken when combining code from several examples to avoid potential side
 * effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
 * for an API functional library-approach to peripheral configuration.
 *
 * --/COPYRIGHT--*/
//******************************************************************************
//  MSP430G2xx3 Demo - Software Poll P1.4, Set P1.0 if P1.4 = 1
//
//  Description: Poll P1.4 in a loop, if hi P1.0 is set, if low, P1.0 reset.
//  ACLK = n/a, MCLK = SMCLK = default DCO
//
//               MSP430G2xx3
//            -----------------
//        /|\|              XIN|-
//         | |                 |
//         --|RST          XOUT|-
//     /|\   |                 |
//      --o--|P1.4         P1.0|-->LED
//     \|/
//
//  D. Dang
//  Texas Instruments, Inc
//  December 2010
//   Built with CCS Version 4.2.0 and IAR Embedded Workbench Version: 5.10
//******************************************************************************

#include <msp430.h>

void LEDSetup()
{
    P1DIR |= BIT0;
    //P1SEL0 |= BIT0;
    //P1SEL1 = 0;
    P1OUT &= ~BIT0;
    
    P2DIR |= BIT0;
    P2SEL0 |= BIT0;
    P2SEL1 = 0;
    P2OUT &= ~BIT0;
}

void ButtonSetup()
{
    P2DIR &= ~BIT1;
    P2IE |= BIT1;
    P2REN |= BIT1;
    P2IES |= BIT1;
    P2IFG &= ~BIT1;
    P2OUT |= BIT1;
}

void TimerB0Setup()
{
     TB0CTL = TBSSEL_1 + MC_1 + ID_3;   // ACLK with 8 divider set to up mode
     
     TB0CCR0 = 1000;                    // PWM Period
     TB0CCTL1 = OUTMOD_7;               // CCR1 reset/set
     
     TB0CCR1 = 500;                     // CCR1 PWM duty cycle
     
}

void TimerB1Setup()
{
    TB0CTL = TBSSEL_1 + MC_1 + ID_3;    // ACLK with 8 divider set to up mode
}


int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;       // stop watchdog timer
	LEDSetup();                     // Initialize our LEDS
	ButtonSetup();                  // Initialize our button
	TimerB0Setup();                 // Initialize Timer0
	TimerB1Setup();                 // Initialize Timer1
	__bis_SR_register(GIE);         // Enable interrupt
}

#pragma vector=PORT1_VECTOR
__interrupt void Port_1 (void)
{
    TB0CCR1 = (TB0CCR1 + 100) % 500;    // Add 100 to CCR1 and % by 500
    TBCTL |= MC_1;                      // Set Timer A to up mode 
    P2IFG &= ~BIT1;                     // Clear flag
}

#pragma vector = TIMER0_B0_VECTOR
__interrupt void Timer_B (void)
{
    P2OUT ^= BIT0;                  // Toggle led output
    TB0CTL |= MC_0 + TBCLR;         // Stop and clear the timer A
}
